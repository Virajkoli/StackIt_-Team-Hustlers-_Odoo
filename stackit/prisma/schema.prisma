generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  username      String?        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  answers       Answer[]
  notifications Notification[]
  questions     Question[]
  sessions      Session[]
  votes         Vote[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Question {
  id          String   @id @default(cuid())
  title       String
  description String
  authorId    String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     Answer[]
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes       Vote[]
  tags        Tag[]    @relation("QuestionToTag")

  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  content    String
  questionId String
  authorId   String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      Vote[]

  @@map("answers")
}

model Tag {
  id        String     @id @default(cuid())
  name      String     @unique
  color     String     @default("#3B82F6")
  questions Question[] @relation("QuestionToTag")

  @@map("tags")
}

model Vote {
  id         String    @id @default(cuid())
  userId     String
  questionId String?
  answerId   String?
  type       VoteType
  createdAt  DateTime  @default(now())
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@map("votes")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  GUEST
  USER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}

enum NotificationType {
  QUESTION_ANSWERED
  ANSWER_COMMENTED
  MENTION
}
